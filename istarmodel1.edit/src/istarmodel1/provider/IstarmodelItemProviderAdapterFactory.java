/**
 */
package istarmodel1.provider;

import istarmodel1.util.IstarmodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IstarmodelItemProviderAdapterFactory extends IstarmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IstarmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.ActorContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorContainerItemProvider actorContainerItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.ActorContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorContainerAdapter() {
		if (actorContainerItemProvider == null) {
			actorContainerItemProvider = new ActorContainerItemProvider(this);
		}

		return actorContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.AgentContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentContainerItemProvider agentContainerItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.AgentContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentContainerAdapter() {
		if (agentContainerItemProvider == null) {
			agentContainerItemProvider = new AgentContainerItemProvider(this);
		}

		return agentContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.RoleContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleContainerItemProvider roleContainerItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.RoleContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleContainerAdapter() {
		if (roleContainerItemProvider == null) {
			roleContainerItemProvider = new RoleContainerItemProvider(this);
		}

		return roleContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.Quality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualityItemProvider qualityItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.Quality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualityAdapter() {
		if (qualityItemProvider == null) {
			qualityItemProvider = new QualityItemProvider(this);
		}

		return qualityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.IstarDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IstarDiagramItemProvider istarDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.IstarDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIstarDiagramAdapter() {
		if (istarDiagramItemProvider == null) {
			istarDiagramItemProvider = new IstarDiagramItemProvider(this);
		}

		return istarDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.DiagramContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramContainerItemProvider diagramContainerItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.DiagramContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramContainerAdapter() {
		if (diagramContainerItemProvider == null) {
			diagramContainerItemProvider = new DiagramContainerItemProvider(this);
		}

		return diagramContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.RoleNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleNodeItemProvider roleNodeItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.RoleNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleNodeAdapter() {
		if (roleNodeItemProvider == null) {
			roleNodeItemProvider = new RoleNodeItemProvider(this);
		}

		return roleNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.AgentNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentNodeItemProvider agentNodeItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.AgentNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentNodeAdapter() {
		if (agentNodeItemProvider == null) {
			agentNodeItemProvider = new AgentNodeItemProvider(this);
		}

		return agentNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.ActorReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorRealItemProvider actorRealItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.ActorReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorRealAdapter() {
		if (actorRealItemProvider == null) {
			actorRealItemProvider = new ActorRealItemProvider(this);
		}

		return actorRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.ActorNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorNodeItemProvider actorNodeItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.ActorNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorNodeAdapter() {
		if (actorNodeItemProvider == null) {
			actorNodeItemProvider = new ActorNodeItemProvider(this);
		}

		return actorNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istarmodel1.ActorContainerImp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorContainerImpItemProvider actorContainerImpItemProvider;

	/**
	 * This creates an adapter for a {@link istarmodel1.ActorContainerImp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorContainerImpAdapter() {
		if (actorContainerImpItemProvider == null) {
			actorContainerImpItemProvider = new ActorContainerImpItemProvider(this);
		}

		return actorContainerImpItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (actorContainerItemProvider != null) actorContainerItemProvider.dispose();
		if (agentContainerItemProvider != null) agentContainerItemProvider.dispose();
		if (roleContainerItemProvider != null) roleContainerItemProvider.dispose();
		if (qualityItemProvider != null) qualityItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (istarDiagramItemProvider != null) istarDiagramItemProvider.dispose();
		if (diagramContainerItemProvider != null) diagramContainerItemProvider.dispose();
		if (roleNodeItemProvider != null) roleNodeItemProvider.dispose();
		if (agentNodeItemProvider != null) agentNodeItemProvider.dispose();
		if (actorRealItemProvider != null) actorRealItemProvider.dispose();
		if (actorNodeItemProvider != null) actorNodeItemProvider.dispose();
		if (actorContainerImpItemProvider != null) actorContainerImpItemProvider.dispose();
	}

}
